import streamlit as st
import sys
import os
import re

# Configurar p√°gina ANTES que cualquier otra cosa
st.set_page_config(page_title="Generador Educativo AI", page_icon="ü§ñ", layout="wide")

# T√≠tulo principal
st.title("Generador de contenido educativo AI ü§ñ")
st.markdown("Genera material educativo con exportaci√≥n a Word")

# Verificar imports paso a paso
with st.spinner("üîÑ Verificando dependencias..."):
    # Agregar path
    try:
        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    except Exception as e:
        st.error(f"‚ùå Error agregando path: {e}")

    # Verificar python-docx
    try:
        from docx import Document
        from docx.enum.text import WD_ALIGN_PARAGRAPH
        from docx.shared import Inches
        from datetime import datetime
        from io import BytesIO
        DOCX_OK = True
    except ImportError as e:
        st.error(f"‚ùå python-docx no disponible: {e}")
        DOCX_OK = False

    # Verificar servicios Bedrock
    try:
        from core.bedrock_services import generar_programacion_curricular, generar_imagen_promocional, generar_resumen_comentarios
        SERVICES_OK = True
    except Exception as e:
        st.error(f"‚ùå Error importando servicios: {e}")
        SERVICES_OK = False

# Funci√≥n para procesar y formatear el contenido generado
def formatear_contenido_educativo(contenido_raw, grado):
    """
    Procesa el contenido generado y lo estructura como un documento educativo profesional
    """
    # T√≠tulo principal del documento
    contenido_formateado = f"""
# üìö PROGRAMACI√ìN CURRICULAR - CIENCIA Y TECNOLOG√çA

## üéì {grado}¬∫ DE EDUCACI√ìN SECUNDARIA

---

### üìã INFORMACI√ìN GENERAL
- **√Årea Curricular:** Ciencia y Tecnolog√≠a
- **Grado:** {grado}¬∫ de Secundaria
- **Fecha de Elaboraci√≥n:** {datetime.now().strftime('%d de %B de %Y')}
- **Documento generado por:** IA Educativa

---

### üìñ CONTENIDO DE LA PROGRAMACI√ìN

{contenido_raw}

---

### üìù NOTAS METODOL√ìGICAS

Esta programaci√≥n curricular ha sido dise√±ada siguiendo los lineamientos del Curr√≠culo Nacional de la Educaci√≥n B√°sica del Per√∫, adapt√°ndose a las necesidades espec√≠ficas del {grado}¬∫ grado de educaci√≥n secundaria.

**Recomendaciones de implementaci√≥n:**
- Considerar el contexto sociocultural de los estudiantes
- Adaptar las estrategias seg√∫n los ritmos de aprendizaje
- Integrar recursos tecnol√≥gicos disponibles
- Promover el aprendizaje colaborativo y la indagaci√≥n cient√≠fica

---

*Documento generado autom√°ticamente por el Sistema de IA Educativa*
"""
    return contenido_formateado

# Funci√≥n mejorada para crear Word
def crear_documento_profesional(contenido, titulo, grado):
    if not DOCX_OK:
        return None
    
    doc = Document()
    
    # Configurar propiedades del documento
    doc.core_properties.title = titulo
    doc.core_properties.author = "Sistema IA Educativa"
    doc.core_properties.subject = f"Programaci√≥n Curricular {grado}¬∫ Secundaria"
    
    # T√≠tulo principal
    titulo_principal = doc.add_heading(f"PROGRAMACI√ìN CURRICULAR", 0)
    titulo_principal.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Subt√≠tulo
    subtitulo = doc.add_heading(f"CIENCIA Y TECNOLOG√çA - {grado}¬∫ SECUNDARIA", 1)
    subtitulo.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Informaci√≥n del documento
    info_para = doc.add_paragraph()
    info_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
    info_run = info_para.add_run(f"Fecha: {datetime.now().strftime('%d/%m/%Y')}\nGenerado por: IA Educativa")
    info_run.italic = True
    
    # L√≠nea separadora
    doc.add_paragraph("=" * 80)
    
    # Procesar contenido l√≠nea por l√≠nea con formato mejorado
    lineas = contenido.split('\n')
    for line in lineas:
        line = line.strip()
        if not line:
            continue
            
        # Detectar encabezados
        if line.startswith('#'):
            level = line.count('#')
            text = line.replace('#', '').strip()
            if text:
                doc.add_heading(text, level=min(level, 3))
        
        # Detectar tablas (l√≠neas con m√∫ltiples |)
        elif '|' in line and line.count('|') >= 2:
            # Formatear como tabla o lista
            cleaned_line = line.replace('|', ' | ').strip()
            para = doc.add_paragraph(cleaned_line)
            para.style = 'List Bullet'
        
        # Detectar listas con bullets
        elif line.startswith(('‚Ä¢', '-', '*', '‚Üí')):
            para = doc.add_paragraph()
            para.style = 'List Bullet'
            para.add_run(line[1:].strip())
        
        # Detectar texto en may√∫sculas (posibles t√≠tulos)
        elif line.isupper() and len(line) > 5:
            doc.add_heading(line.title(), 2)
        
        # Texto normal
        else:
            if len(line) > 10:  # Solo agregar l√≠neas con contenido significativo
                doc.add_paragraph(line)
    
    # Pie de p√°gina
    doc.add_page_break()
    footer = doc.add_paragraph()
    footer.alignment = WD_ALIGN_PARAGRAPH.CENTER
    footer_run = footer.add_run("GENERADO POR SISTEMA IA EDUCATIVA\nMinisterio de Educaci√≥n - Rep√∫blica del Per√∫")
    footer_run.italic = True
    
    # Convertir a bytes
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer.getvalue()

# Solo mostrar tabs si todo est√° OK
if SERVICES_OK:
    st.success("üéâ ¬°Sistema listo! Genera tu programaci√≥n curricular.")
    
    # Crear tabs
    tab1, tab2, tab3 = st.tabs(["üìö Programaci√≥n Curricular", "üñºÔ∏è Im√°genes Educativas", "üó£Ô∏è An√°lisis de Comentarios"])
    
    with tab1:
        st.header("üìö Generador de Programaci√≥n Curricular")
        
        # Informaci√≥n contextual
        with st.expander("‚ÑπÔ∏è Informaci√≥n sobre la Programaci√≥n Curricular"):
            st.markdown("""
            **¬øQu√© incluye una programaci√≥n curricular?**
            - ‚úÖ Competencias y capacidades espec√≠ficas
            - ‚úÖ Contenidos organizados por unidades
            - ‚úÖ Desempe√±os observables y medibles
            - ‚úÖ Criterios e instrumentos de evaluaci√≥n
            - ‚úÖ Estrategias metodol√≥gicas
            
            **Basado en:** Curr√≠culo Nacional de Educaci√≥n B√°sica - MINEDU Per√∫
            """)
        
        with st.form("form_prog", clear_on_submit=False):
            col1, col2 = st.columns([1, 2])
            
            with col1:
                grado = st.selectbox("üéì Grado", [3, 4, 5], format_func=lambda x: f"{x}¬∫ Secundaria")
                
                # Contenidos predefinidos por grado
                contenidos_por_grado = {
                    3: "1. LA F√çSICA Y MAGNITUDES\n2. VECTORES EN EL PLANO\n3. CINEM√ÅTICA\n4. DIN√ÅMICA LINEAL\n5. TRABAJO Y ENERG√çA\n6. QU√çMICA Y MATERIA",
                    4: "1. ONDAS Y SONIDO\n2. √ìPTICA GEOM√âTRICA\n3. ELECTRICIDAD\n4. MAGNETISMO\n5. QU√çMICA ORG√ÅNICA\n6. BIOQU√çMICA",
                    5: "1. F√çSICA MODERNA\n2. TERMODIN√ÅMICA\n3. F√çSICA NUCLEAR\n4. QU√çMICA AVANZADA\n5. BIOTECNOLOG√çA\n6. INVESTIGACI√ìN CIENT√çFICA"
                }
            
            with col2:
                competencia = st.text_area(
                    "üéØ Competencia Principal", 
                    "Indaga mediante m√©todos cient√≠ficos para construir sus conocimientos.",
                    height=80,
                    help="Competencia principal del √°rea de Ciencia y Tecnolog√≠a"
                )
            
            capacidades = st.text_area(
                "‚ö° Capacidades Espec√≠ficas",
                "‚Ä¢ Problematiza situaciones para hacer indagaci√≥n.\n"
                "‚Ä¢ Dise√±a estrategias para hacer indagaci√≥n.\n" 
                "‚Ä¢ Genera y registra datos o informaci√≥n.\n"
                "‚Ä¢ Analiza datos e informaci√≥n.\n"
                "‚Ä¢ Eval√∫a y comunica el proceso y resultados de su indagaci√≥n.",
                height=120,
                help="Capacidades que desarrollar√° el estudiante"
            )
            
            contenidos = st.text_area(
                "üìñ Contenidos Curriculares",
                contenidos_por_grado[grado],
                height=120,
                help="Contenidos organizados por unidades tem√°ticas"
            )
            
            generar = st.form_submit_button("üéØ Generar Programaci√≥n Curricular Completa", use_container_width=True)
        
        # FUERA del formulario - manejar resultados
        if generar:
            with st.spinner('üîÑ Generando programaci√≥n curricular profesional...'):
                try:
                    resultado_raw = generar_programacion_curricular(grado, competencia, capacidades, contenidos)
                    
                    temp = resultado_raw
                    # Formatear el contenido
                    contenido_formateado = formatear_contenido_educativo(resultado_raw, grado)
                    contenido_formateado = temp
                    st.success("‚úÖ ¬°Programaci√≥n curricular generada exitosamente!")
                    
                    # Mostrar resultado formateado
                    st.markdown("---")
                    st.markdown(contenido_formateado)
                    st.markdown("---")
                    
                    # Botones de descarga
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.download_button(
                            "üìÑ Descargar TXT",
                            data=contenido_formateado,
                            file_name=f"programacion_curricular_{grado}to_secundaria.txt",
                            mime="text/plain",
                            key="download_txt_prog",
                            use_container_width=True
                        )
                    
                    with col2:
                        if DOCX_OK:
                            doc_bytes = crear_documento_profesional(resultado_raw, f"Programaci√≥n Curricular {grado}¬∫ Secundaria", grado)
                            if doc_bytes:
                                st.download_button(
                                    "üìù Descargar WORD",
                                    data=doc_bytes,
                                    file_name=f"programacion_curricular_{grado}to_secundaria.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                    key="download_docx_prog",
                                    use_container_width=True
                                )
                        else:
                            st.button("üìù WORD no disponible", disabled=True, key="docx_disabled_prog", use_container_width=True)
                    
                    with col3:
                        # Bot√≥n para generar nueva programaci√≥n
                        if st.button("üîÑ Generar Nueva", key="nueva_prog", use_container_width=True):
                            st.rerun()
                            
                except Exception as e:
                    st.error(f"‚ùå Error generando programaci√≥n: {str(e)}")
                    st.info("üí° Verifica la conexi√≥n con AWS Bedrock")
    
    with tab2:
        st.header("üñºÔ∏è Generador de Im√°genes Educativas")
        
        with st.form("form_img"):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                prompt = st.text_area(
                    "üé® Descripci√≥n de la imagen educativa",
                    "Estudiantes de secundaria realizando un experimento de f√≠sica en un laboratorio moderno, "
                    "con materiales cient√≠ficos, ambiente bien iluminado, estilo fotogr√°fico profesional",
                    height=100
                )
            
            with col2:
                st.markdown("**üí° Sugerencias:**")
                st.markdown("- Laboratorio de ciencias")
                st.markdown("- Experimento de qu√≠mica")
                st.markdown("- Aula de f√≠sica moderna")
                st.markdown("- Estudiantes investigando")
            
            generar_img = st.form_submit_button("üé® Generar Imagen Educativa", use_container_width=True)
        
        # FUERA del formulario
        if generar_img:
            with st.spinner('üé® Generando imagen educativa...'):
                try:
                    imagen = generar_imagen_promocional(prompt)
                    if imagen.startswith("Error"):
                        st.error(imagen)
                    else:
                        st.subheader("üñºÔ∏è Imagen Educativa Generada")
                        st.image(imagen, caption=f"Imagen generada: {prompt[:50]}...", use_column_width=True)
                except Exception as e:
                    st.error(f"‚ùå Error generando imagen: {str(e)}")
    
    with tab3:
        st.header("üó£Ô∏è An√°lisis de Comentarios Educativos")
        
        with st.form("form_comment"):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                comentarios = st.text_area(
                    "üí¨ Comentarios de estudiantes/docentes",
                    "Las clases de ciencia son muy interesantes y aprendo mucho.\n"
                    "Me gustar√≠a tener m√°s experimentos pr√°cticos en el laboratorio.\n"
                    "A veces los conceptos de f√≠sica son dif√≠ciles de entender.\n"
                    "El profesor explica muy bien los temas de qu√≠mica.",
                    height=120
                )
            
            with col2:
                st.markdown("**üìä El an√°lisis incluir√°:**")
                st.markdown("- Sentimientos generales")
                st.markdown("- Temas de inter√©s")
                st.markdown("- √Åreas de mejora")
                st.markdown("- Recomendaciones")
            
            analizar = st.form_submit_button("üîç Analizar Comentarios", use_container_width=True)
        
        # FUERA del formulario
        if analizar and comentarios.strip():
            with st.spinner('üîç Analizando comentarios educativos...'):
                try:
                    analisis_raw = generar_resumen_comentarios(comentarios)
                    
                    # Formatear an√°lisis
                    analisis_formateado = f"""
# üìä AN√ÅLISIS DE COMENTARIOS EDUCATIVOS

## üìÖ {datetime.now().strftime('%d de %B de %Y')}

---

### üìù COMENTARIOS ANALIZADOS
{comentarios}

---

### üîç AN√ÅLISIS DETALLADO
{analisis_raw}

---

### üìã RECOMENDACIONES GENERALES
- Implementar metodolog√≠as activas de ense√±anza
- Fomentar el aprendizaje experimental
- Adaptar estrategias seg√∫n retroalimentaci√≥n estudiantil
- Mantener comunicaci√≥n constante con estudiantes

---

*An√°lisis generado por Sistema IA Educativa*
"""
                    
                    st.success("‚úÖ ¬°An√°lisis completado!")
                    st.markdown("---")
                    st.markdown(analisis_formateado)
                    st.markdown("---")
                    
                    # Botones de descarga
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.download_button(
                            "üìÑ Descargar An√°lisis TXT",
                            data=analisis_formateado,
                            file_name=f"analisis_comentarios_{datetime.now().strftime('%Y%m%d')}.txt",
                            mime="text/plain",
                            key="download_txt_analisis",
                            use_container_width=True
                        )
                    
                    with col2:
                        if DOCX_OK:
                            doc_bytes = crear_documento_profesional(analisis_raw, "An√°lisis de Comentarios Educativos", "An√°lisis")
                            if doc_bytes:
                                st.download_button(
                                    "üìù Descargar WORD", 
                                    data=doc_bytes,
                                    file_name=f"analisis_comentarios_{datetime.now().strftime('%Y%m%d')}.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                    key="download_docx_analisis",
                                    use_container_width=True
                                )
                        else:
                            st.button("üìù WORD no disponible", disabled=True, key="docx_disabled_analisis", use_container_width=True)
                            
                except Exception as e:
                    st.error(f"‚ùå Error en an√°lisis: {str(e)}")
        elif analizar:
            st.warning("‚ö†Ô∏è Por favor ingresa algunos comentarios para analizar")

else:
    st.error("‚ö†Ô∏è Los servicios no est√°n disponibles. Verifica la configuraci√≥n.")
    
    with st.expander("üîß Informaci√≥n de diagn√≥stico"):
        st.write(f"**Archivo actual:** {__file__}")
        st.write(f"**Directorio actual:** {os.getcwd()}")
        st.write(f"**Directorio del archivo:** {os.path.dirname(__file__)}")
        st.write(f"**Directorio padre:** {os.path.dirname(os.path.dirname(__file__))}")
        
        core_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'core')
        st.write(f"**Buscando core en:** {core_path}")
        st.write(f"**Core existe:** {os.path.exists(core_path)}")
        
        if os.path.exists(core_path):
            st.write(f"**Archivos en core:** {os.listdir(core_path)}")

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center'>
<h6>üéì Sistema de Generaci√≥n de Contenido Educativo con IA</h6>
<p><em>Desarrollado para el Ministerio de Educaci√≥n del Per√∫</em></p>
</div>
""", unsafe_allow_html=True)